<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-2.5.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/rabbit
            http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">

	<context:annotation-config />
	<!-- 开启扫描 根据base-package指定的路径，扫描其下所有包含注解的Bean，并自动注入 -->
	<context:component-scan base-package="com.myproject.*" />
	
	<!-- 开启aop切面 -->
	<aop:aspectj-autoproxy />

	<!-- 加载全局配置文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!--  注入数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" 	value="${jdbc.driverClassName}" />
		<property name="url" 				value="${jdbc.url}" />
		<property name="username" 			value="${jdbc.username}" />
		<property name="password" 			value="${jdbc.password}" />
	</bean>
	<!-- 配置sessionFactory 这边spring整合了hibernate -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
	</bean> 
	
	<!--  hibernateTemplate模板  -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 定义hibernate事务管理器 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- 那些类的哪些方法参与事务-->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut id="dbDao" expression="execution(* com.chinac.library.dao.impl.*.*(..))" /> -->
<!-- 		<aop:advisor advice-ref="dbDaoAdvice" pointcut-ref="dbDao" /> -->
<!-- 	</aop:config> -->
	<!-- 配置事务的传播特性 -->
<!-- 	<tx:advice id="dbDaoAdvice" transaction-manager="txManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" /> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
	
		<!-- 那些类的哪些方法参与事务-->
	<aop:config>
		<aop:pointcut id="dbService" expression="execution(* com.myproject.library.service.impl.*.*(..))" />
		<aop:advisor advice-ref="dbServiceAdvice" pointcut-ref="dbService" />
	</aop:config>
	<!-- 配置事务的传播特性 -->
	<tx:advice id="dbServiceAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<import resource="classpath:activiti-context.xml"/>
	
</beans>
